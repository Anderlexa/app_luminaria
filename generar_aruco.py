import cv2
import numpy as np
import os

def generar_codigos_aruco():
    """
    Genera c√≥digos ArUco optimizados para medici√≥n de distancias precisas.
    Los c√≥digos se guardan en la carpeta static/aruco/
    """
    
    # Crear directorio si no existe
    if not os.path.exists("static/aruco"):
        os.makedirs("static/aruco")
    
    # Configurar diccionario ArUco
    aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_50)
    
    # Generar c√≥digos ArUco optimizados
    for i in range(10):  # Generar 10 c√≥digos diferentes
        # Crear imagen del marcador con mayor resoluci√≥n
        marker_size = 300  # Tama√±o en p√≠xeles (aumentado para mejor precisi√≥n)
        marker_img = cv2.aruco.generateImageMarker(aruco_dict, i, marker_size)
        
        # Agregar borde blanco m√°s grueso para mejor detecci√≥n de bordes
        border_size = 80  # Borde m√°s grueso para mejor definici√≥n de bordes
        marker_with_border = cv2.copyMakeBorder(
            marker_img, 
            border_size, border_size, border_size, border_size,
            cv2.BORDER_CONSTANT, 
            value=(255, 255, 255)
        )
        
        # Agregar marco negro exterior para mejor contraste
        outer_border = 20
        marker_with_outer_border = cv2.copyMakeBorder(
            marker_with_border,
            outer_border, outer_border, outer_border, outer_border,
            cv2.BORDER_CONSTANT,
            value=(0, 0, 0)
        )
        
        # Agregar texto identificador con mejor contraste
        font = cv2.FONT_HERSHEY_SIMPLEX
        font_scale = 0.8
        thickness = 2
        
        # Texto con fondo blanco para mejor legibilidad
        text = f'ArUco ID: {i}'
        text_size = cv2.getTextSize(text, font, font_scale, thickness)[0]
        text_x = 10
        text_y = marker_with_outer_border.shape[0] - 20
        
        # Dibujar fondo blanco para el texto
        cv2.rectangle(marker_with_outer_border, 
                     (text_x - 5, text_y - text_size[1] - 5),
                     (text_x + text_size[0] + 5, text_y + 5),
                     (255, 255, 255), -1)
        
        # Dibujar texto
        cv2.putText(marker_with_outer_border, text, 
                   (text_x, text_y), 
                   font, font_scale, (0, 0, 0), thickness)
        
        # Agregar informaci√≥n de calibraci√≥n
        calib_text = f'Tama√±o: 5cm'
        calib_text_size = cv2.getTextSize(calib_text, font, 0.6, 1)[0]
        calib_x = 10
        calib_y = text_y - text_size[1] - 10
        
        # Fondo para texto de calibraci√≥n
        cv2.rectangle(marker_with_outer_border,
                     (calib_x - 5, calib_y - calib_text_size[1] - 5),
                     (calib_x + calib_text_size[0] + 5, calib_y + 5),
                     (255, 255, 255), -1)
        
        cv2.putText(marker_with_outer_border, calib_text,
                   (calib_x, calib_y),
                   font, 0.6, (0, 0, 0), 1)
        
        # Guardar imagen
        filename = f"static/aruco/aruco_{i}.png"
        cv2.imwrite(filename, marker_with_outer_border)
        print(f"Generado: {filename}")
    
    # Generar marcadores de calibraci√≥n especiales
    generar_marcadores_calibracion()
    
    # Crear archivo de instrucciones mejorado
    instrucciones = """
# C√≥digos ArUco Optimizados para Medici√≥n de Luminarias

## üéØ Mejoras de Precisi√≥n Implementadas:

### 1. **Medici√≥n desde Bordes Externos**
- La aplicaci√≥n ahora mide la distancia entre los bordes externos de los marcadores
- Esto proporciona mayor precisi√≥n que medir desde los centros
- Elimina la variabilidad del tama√±o de los marcadores

### 2. **Detecci√≥n Optimizada**
- Par√°metros de detecci√≥n mejorados para mayor estabilidad
- Filtrado de outliers en el c√°lculo de escala
- Refinamiento de esquinas con subp√≠xeles

### 3. **Marcadores de Calibraci√≥n**
- Marcadores especiales para verificar la precisi√≥n
- Bordes m√°s definidos para mejor detecci√≥n
- Informaci√≥n de calibraci√≥n incluida en cada marcador

## üìã Instrucciones de Uso Mejoradas:

### Preparaci√≥n:
1. **Imprime los c√≥digos ArUco** en papel blanco de alta calidad
2. **Usa marcadores del mismo tama√±o** (recomendado: 5cm de lado)
3. **Pega los marcadores en superficies planas** para evitar deformaciones
4. **Aseg√∫rate de buena iluminaci√≥n** para mejor detecci√≥n

### Medici√≥n:
1. **Coloca dos marcadores** en el espacio a medir
2. **Separa los marcadores** por la distancia que quieres medir
3. **Ingresa el tama√±o real** del lado del marcador (en cm)
4. **Activa la c√°mara** y apunta hacia los marcadores
5. **Mant√©n la c√°mara estable** durante la medici√≥n
6. **La medici√≥n se realiza autom√°ticamente** desde los bordes externos

### Consejos para M√°xima Precisi√≥n:
- ‚úÖ Usa marcadores impresos en alta resoluci√≥n
- ‚úÖ Aseg√∫rate de que ambos marcadores sean completamente visibles
- ‚úÖ Mant√©n la c√°mara perpendicular a los marcadores
- ‚úÖ Evita sombras y reflejos en los marcadores
- ‚úÖ Usa iluminaci√≥n uniforme
- ‚úÖ Verifica que el tama√±o ingresado sea exacto

## üìÅ C√≥digos Disponibles:
- aruco_0.png - ID: 0 (Marcador est√°ndar)
- aruco_1.png - ID: 1 (Marcador est√°ndar)
- aruco_2.png - ID: 2 (Marcador est√°ndar)
- aruco_3.png - ID: 3 (Marcador est√°ndar)
- aruco_4.png - ID: 4 (Marcador est√°ndar)
- aruco_5.png - ID: 5 (Marcador est√°ndar)
- aruco_6.png - ID: 6 (Marcador est√°ndar)
- aruco_7.png - ID: 7 (Marcador est√°ndar)
- aruco_8.png - ID: 8 (Marcador est√°ndar)
- aruco_9.png - ID: 9 (Marcador est√°ndar)
- calibracion_10cm.png - Marcador de calibraci√≥n 10cm
- calibracion_20cm.png - Marcador de calibraci√≥n 20cm

## üîß Informaci√≥n T√©cnica:
- **Diccionario ArUco:** DICT_4X4_50
- **Tama√±o de marcador:** 300px (alta resoluci√≥n)
- **Borde blanco:** 80px para mejor detecci√≥n
- **Marco negro:** 20px para contraste
- **Precisi√≥n estimada:** ¬±1-2% en condiciones √≥ptimas
"""
    
    with open("static/aruco/INSTRUCCIONES.txt", "w", encoding="utf-8") as f:
        f.write(instrucciones)
    
    print("\n‚úÖ C√≥digos ArUco optimizados generados exitosamente!")
    print("üìÅ Revisa la carpeta: static/aruco/")
    print("üìñ Lee las instrucciones en: static/aruco/INSTRUCCIONES.txt")
    print("üéØ Mejoras implementadas:")
    print("   - Medici√≥n desde bordes externos")
    print("   - Detecci√≥n optimizada")
    print("   - Marcadores de calibraci√≥n")
    print("   - Mayor precisi√≥n en mediciones")

def generar_marcadores_calibracion():
    """
    Genera marcadores de calibraci√≥n especiales para verificar la precisi√≥n.
    """
    aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_50)
    
    # Marcador de calibraci√≥n de 10cm
    marker_size = 400  # Tama√±o m√°s grande para calibraci√≥n
    marker_img = cv2.aruco.generateImageMarker(aruco_dict, 10, marker_size)
    
    # Borde blanco grueso
    border_size = 100
    marker_with_border = cv2.copyMakeBorder(
        marker_img, 
        border_size, border_size, border_size, border_size,
        cv2.BORDER_CONSTANT, 
        value=(255, 255, 255)
    )
    
    # Marco negro exterior
    outer_border = 30
    marker_with_outer_border = cv2.copyMakeBorder(
        marker_with_border,
        outer_border, outer_border, outer_border, outer_border,
        cv2.BORDER_CONSTANT,
        value=(0, 0, 0)
    )
    
    # Agregar informaci√≥n de calibraci√≥n
    font = cv2.FONT_HERSHEY_SIMPLEX
    
    # T√≠tulo de calibraci√≥n
    title_text = "CALIBRACION"
    title_size = cv2.getTextSize(title_text, font, 1.2, 3)[0]
    title_x = 20
    title_y = 50
    
    # Fondo para t√≠tulo
    cv2.rectangle(marker_with_outer_border,
                 (title_x - 10, title_y - title_size[1] - 10),
                 (title_x + title_size[0] + 10, title_y + 10),
                 (255, 255, 255), -1)
    
    cv2.putText(marker_with_outer_border, title_text,
               (title_x, title_y), font, 1.2, (0, 0, 0), 3)
    
    # Informaci√≥n de tama√±o
    size_text = "Tama√±o Real: 10cm"
    size_size = cv2.getTextSize(size_text, font, 0.8, 2)[0]
    size_x = 20
    size_y = title_y + 40
    
    cv2.rectangle(marker_with_outer_border,
                 (size_x - 10, size_y - size_size[1] - 10),
                 (size_x + size_size[0] + 10, size_y + 10),
                 (255, 255, 255), -1)
    
    cv2.putText(marker_with_outer_border, size_text,
               (size_x, size_y), font, 0.8, (0, 0, 0), 2)
    
    # Guardar marcador de calibraci√≥n
    filename = "static/aruco/calibracion_10cm.png"
    cv2.imwrite(filename, marker_with_outer_border)
    print(f"Generado marcador de calibraci√≥n: {filename}")
    
    # Marcador de calibraci√≥n de 20cm
    marker_img_20 = cv2.aruco.generateImageMarker(aruco_dict, 11, marker_size)
    marker_with_border_20 = cv2.copyMakeBorder(
        marker_img_20, 
        border_size, border_size, border_size, border_size,
        cv2.BORDER_CONSTANT, 
        value=(255, 255, 255)
    )
    
    marker_with_outer_border_20 = cv2.copyMakeBorder(
        marker_with_border_20,
        outer_border, outer_border, outer_border, outer_border,
        cv2.BORDER_CONSTANT,
        value=(0, 0, 0)
    )
    
    # T√≠tulo para marcador de 20cm
    cv2.rectangle(marker_with_outer_border_20,
                 (title_x - 10, title_y - title_size[1] - 10),
                 (title_x + title_size[0] + 10, title_y + 10),
                 (255, 255, 255), -1)
    
    cv2.putText(marker_with_outer_border_20, title_text,
               (title_x, title_y), font, 1.2, (0, 0, 0), 3)
    
    # Informaci√≥n de tama√±o para 20cm
    size_text_20 = "Tama√±o Real: 20cm"
    size_size_20 = cv2.getTextSize(size_text_20, font, 0.8, 2)[0]
    
    cv2.rectangle(marker_with_outer_border_20,
                 (size_x - 10, size_y - size_size_20[1] - 10),
                 (size_x + size_size_20[0] + 10, size_y + 10),
                 (255, 255, 255), -1)
    
    cv2.putText(marker_with_outer_border_20, size_text_20,
               (size_x, size_y), font, 0.8, (0, 0, 0), 2)
    
    filename_20 = "static/aruco/calibracion_20cm.png"
    cv2.imwrite(filename_20, marker_with_outer_border_20)
    print(f"Generado marcador de calibraci√≥n: {filename_20}")

if __name__ == "__main__":
    generar_codigos_aruco() 